/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package tpbitcoin;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.reflect.TypeToken;
import org.bitcoinj.core.*;
import org.bitcoinj.params.UnitTestParams;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.lang.reflect.Type;
import java.math.BigInteger;
import java.net.URL;
import java.time.YearMonth;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;

public class App {



    public static void main(String[] args) {

        //Q1  hashrate
        double localHashrate = new HashRateEstimator(5000,5).estimate();
        //System.out.println("Hash par seconde en moyenne : " + localHashrate);
        //Q2: latest  block  from mainet (bitcoin blockchain) and its predecessor
        Context context   = new Context(new UnitTestParams()); // required  for working with bitcoinj
        Explorer explorer = new Explorer(); // for interacting with blockchain.info API
        Block lastestBlock = explorer.getBlockFromHash(context.getParams(), explorer.getLatestHash());
        //System.out.println(lastestBlock);
        //System.out.println(" LE HASH:" + lastestBlock.getHashAsString() );
        //System.out.println("La NONCE:" + lastestBlock.getNonce());
        //System.out.println("Le Difficulté target:" + lastestBlock.getDifficultyTargetAsInteger());

        // Q3 Some TXs
        // Le premier bloc a l'indece 0.
	    //System.out.println(" La premier transation est : " + lastestBlock.getTransactions().get(0));
        // Le deucieme bloc a l'indece 1.
        //System.out.println(" La deuxiem transaction est : " +lastestBlock.getTransactions().get(1));
        // Q4 Mine a new block
        Miner miner = new Miner(context.getParams());
        // empty list of tx since creating txs, even fake ones, requires some work
        ArrayList<Transaction> txs = new ArrayList<>();
        // Q4
        Block newBlock = miner.mine(lastestBlock,txs, new ECKey().getPubKey());
        //System.out.println(newBlock.getNonce() );
        //System.out.println(newBlock.getDifficultyTargetAsInteger());
        System.out.println("\n");
        // Q5
        /* Oui notre bloc sera accépter par le reseau.*/
        // Q7 and Q8
        System.out.println("--------------");
        System.out.println("Temps moyenne :" + ImpactUtils.expectedMiningTime(localHashrate,
       		 				 lastestBlock.getDifficultyTargetAsInteger().divide(new BigInteger("10000"))));
        BigInteger nombreHash = ImpactUtils.globalHashRate(lastestBlock.getDifficultyTargetAsInteger());
        System.out.println("Le courant de hash : " +nombreHash);
        System.out.println("LA consomation en kwh : " + ImpactUtils.globalEnergyConsumption(new BigInteger("10000"),1000,nombreHash,30));
        // Q9/Q10 energy w/ most profitable hardware
       // Gson gson = new GsonBuilder()
        //        .registerTypeAdapter(YearMonth.class,new YearMonthAdapter())
         //       .create();
        //List<MiningHardware> hardwares = new ArrayList<>();
/*
        URL resource = App.class.getClassLoader().getResource("hardware.json");
        try(BufferedReader reader = new BufferedReader(new FileReader(resource.getFile()))) {
            Type listType = new TypeToken<ArrayList<MiningHardware>>(){}.getType();
            hardwares = gson.fromJson(reader,listType);
        } catch (Exception e) {
            System.err.println("error opening/reading hardware.json "+ e.getMessage());
        }
		*/


    }




}
